/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/register': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['RegistrationData']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: never
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
      }
    }
  }
  '/auth/login': {
    post: {
      parameters: {
        query?: {
          useCookies?: boolean
          useSessionCookies?: boolean
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LoginRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['AccessTokenResponse']
          }
        }
      }
    }
  }
  '/auth/refresh': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['RefreshRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['AccessTokenResponse']
          }
        }
      }
    }
  }
  '/auth/confirmEmail': {
    get: operations['MapAllIdentityApi-auth/confirmEmail']
  }
  '/auth/resendConfirmationEmail': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['ResendConfirmationEmailRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: never
        }
      }
    }
  }
  '/auth/forgotPassword': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['ForgotPasswordRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: never
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
      }
    }
  }
  '/auth/resetPassword': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['ResetPasswordRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: never
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
      }
    }
  }
  '/auth/manage/2fa': {
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['TwoFactorRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['TwoFactorResponse']
          }
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
        /** @description Not Found */
        404: {
          content: never
        }
      }
    }
  }
  '/auth/manage/info': {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['InfoResponse']
          }
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
        /** @description Not Found */
        404: {
          content: never
        }
      }
    }
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['InfoRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['InfoResponse']
          }
        }
        /** @description Bad Request */
        400: {
          content: {
            'application/problem+json': components['schemas']['HttpValidationProblemDetails']
          }
        }
        /** @description Not Found */
        404: {
          content: never
        }
      }
    }
  }
  '/company': {
    get: operations['GetCompanies']
    post: operations['AddCompany']
  }
  '/company/all': {
    get: operations['GetAllCompaniesInfo']
  }
  '/weatherforecast': {
    get: operations['GetWeatherForecast']
  }
  '/users': {
    get: operations['GetUsers']
    put: operations['ChangeUserDto']
    post: operations['AddUser']
    delete: operations['DeleteUsers']
  }
  '/users/{id}': {
    get: operations['GetUser']
    put: operations['ChangeUser']
    delete: operations['DeleteUser']
  }
  '/users/current': {
    get: operations['GetCurrentUser']
    put: operations['UpdateCurrentUser']
    delete: operations['DeleteCurrentUser']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    AccessTokenResponse: {
      tokenType?: string | null
      accessToken: string | null
      /** Format: int64 */
      expiresIn: number
      refreshToken: string | null
    }
    AddCompanyDto: {
      name?: string | null
      /** Format: date */
      creationDate?: string | null
      address?: string | null
    }
    AddUserDto: {
      firstName?: string | null
      lastName?: string | null
      email: string | null
      /** Format: date */
      birthDate?: string | null
      password: string | null
      phoneNumber?: string | null
      address?: string | null
      role?: string | null
    }
    ChangeUserDto: {
      firstName?: string | null
      lastName?: string | null
      email?: string | null
      /** Format: date */
      birthDate?: string | null
      password?: string | null
      address?: string | null
      phoneNumber?: string | null
      role?: string | null
    }
    CompanyDto: {
      /** Format: int32 */
      id?: number
      name?: string | null
      /** Format: date */
      creationDate?: string
      offices?: components['schemas']['OfficeDto'][] | null
    }
    CreatedUserDto: {
      firstName?: string | null
      lastName?: string | null
      email: string | null
      /** Format: date */
      birthDate?: string | null
      phoneNumber?: string | null
      role?: string | null
    }
    EmployeeDto: {
      /** Format: int32 */
      id?: number
      name?: string | null
      surname?: string | null
      phoneNumber?: string | null
      email?: string | null
      position?: components['schemas']['Position']
      packages?: components['schemas']['PackageDto'][] | null
    }
    ForgotPasswordRequest: {
      email: string | null
    }
    HttpValidationProblemDetails: {
      type?: string | null
      title?: string | null
      /** Format: int32 */
      status?: number | null
      detail?: string | null
      instance?: string | null
      errors?: {
        [key: string]: string[]
      } | null
      [key: string]: unknown
    }
    InfoRequest: {
      newEmail?: string | null
      newPassword?: string | null
      oldPassword?: string | null
    }
    InfoResponse: {
      email: string | null
      isEmailConfirmed: boolean
    }
    LoginRequest: {
      email: string | null
      password: string | null
      twoFactorCode?: string | null
      twoFactorRecoveryCode?: string | null
    }
    OfficeDto: {
      /** Format: int32 */
      id?: number
      address?: string | null
      phoneNumber?: string | null
      employees?: components['schemas']['EmployeeDto'][] | null
    }
    PackageDto: {
      /** Format: uuid */
      id?: string
      trackerNumber?: string | null
      status?: components['schemas']['PackageStatus']
      /** Format: date-time */
      deliveryDate?: string | null
      /** Format: date-time */
      shippingDate?: string | null
      /** Format: uuid */
      senderId?: string
      /** Format: uuid */
      receiverId?: string
      /** Format: int32 */
      senderEmployeeId?: number | null
      /** Format: int32 */
      receiverEmployeeId?: number | null
      /** Format: int32 */
      courierId?: number | null
      deliveryAddress?: string | null
      packageInfo?: components['schemas']['PackageInfoDto']
    }
    PackageInfoDto: {
      /** Format: double */
      weight?: number
      description?: string | null
      fragile?: boolean | null
      hazardous?: boolean | null
    }
    /**
     * Format: int32
     * @enum {integer}
     */
    PackageStatus: 0 | 1 | 2 | 3 | 4
    Position: {
      /** Format: int32 */
      id?: number
      positionType?: string | null
      positionInfo?: string | null
    }
    RefreshRequest: {
      refreshToken: string | null
    }
    RegistrationData: {
      email: string | null
      password: string | null
      firstName: string | null
      lastName: string | null
      /** Format: date */
      birthDate: string
    }
    ResendConfirmationEmailRequest: {
      email: string | null
    }
    ResetPasswordRequest: {
      email: string | null
      resetCode: string | null
      newPassword: string | null
    }
    TwoFactorRequest: {
      enable?: boolean | null
      twoFactorCode?: string | null
      resetSharedKey?: boolean
      resetRecoveryCodes?: boolean
      forgetMachine?: boolean
    }
    TwoFactorResponse: {
      sharedKey: string | null
      /** Format: int32 */
      recoveryCodesLeft: number
      recoveryCodes?: string[] | null
      isTwoFactorEnabled: boolean
      isMachineRemembered: boolean
    }
    UserDto: {
      /** Format: uuid */
      id?: string | null
      firstName?: string | null
      lastName?: string | null
      email?: string | null
      /** Format: date */
      birthDate?: string | null
      phoneNumber?: string | null
      adress?: string | null
      roles?: string[] | null
    }
    WeatherForecast: {
      /** Format: date */
      date?: string
      /** Format: int32 */
      temperatureC?: number
      /** Format: int32 */
      temperatureF?: number
      summary?: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  'MapAllIdentityApi-auth/confirmEmail': {
    parameters: {
      query: {
        userId: string
        code: string
        changedEmail?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  GetCompanies: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanyDto'][]
        }
      }
    }
  }
  AddCompany: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AddCompanyDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['AddCompanyDto']
        }
      }
    }
  }
  GetAllCompaniesInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanyDto'][]
        }
      }
    }
  }
  GetWeatherForecast: {
    parameters: {
      query: {
        num: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['WeatherForecast'][]
        }
      }
    }
  }
  GetUsers: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserDto'][]
        }
      }
    }
  }
  ChangeUserDto: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeUserDto'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ChangeUserDto'][]
        }
      }
    }
  }
  AddUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AddUserDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['CreatedUserDto']
        }
      }
    }
  }
  DeleteUsers: {
    responses: {
      /** @description No Content */
      204: {
        content: never
      }
    }
  }
  GetUser: {
    parameters: {
      query: {
        type: string
      }
      path: {
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserDto']
        }
      }
    }
  }
  ChangeUser: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeUserDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ChangeUserDto']
        }
      }
    }
  }
  DeleteUser: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description No Content */
      204: {
        content: never
      }
    }
  }
  GetCurrentUser: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserDto']
        }
      }
      /** @description Not Found */
      404: {
        content: never
      }
    }
  }
  UpdateCurrentUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeUserDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ChangeUserDto']
        }
      }
      /** @description Not Found */
      404: {
        content: never
      }
    }
  }
  DeleteCurrentUser: {
    responses: {
      /** @description No Content */
      204: {
        content: never
      }
      /** @description Not Found */
      404: {
        content: never
      }
    }
  }
}
